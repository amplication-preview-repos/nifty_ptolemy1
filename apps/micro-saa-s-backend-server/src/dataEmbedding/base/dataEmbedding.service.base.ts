/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DataEmbedding as PrismaDataEmbedding,
  Chatbot as PrismaChatbot,
} from "@prisma/client";

export class DataEmbeddingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataEmbeddingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataEmbedding.count(args);
  }

  async dataEmbeddings(
    args: Prisma.DataEmbeddingFindManyArgs
  ): Promise<PrismaDataEmbedding[]> {
    return this.prisma.dataEmbedding.findMany(args);
  }
  async dataEmbedding(
    args: Prisma.DataEmbeddingFindUniqueArgs
  ): Promise<PrismaDataEmbedding | null> {
    return this.prisma.dataEmbedding.findUnique(args);
  }
  async createDataEmbedding(
    args: Prisma.DataEmbeddingCreateArgs
  ): Promise<PrismaDataEmbedding> {
    return this.prisma.dataEmbedding.create(args);
  }
  async updateDataEmbedding(
    args: Prisma.DataEmbeddingUpdateArgs
  ): Promise<PrismaDataEmbedding> {
    return this.prisma.dataEmbedding.update(args);
  }
  async deleteDataEmbedding(
    args: Prisma.DataEmbeddingDeleteArgs
  ): Promise<PrismaDataEmbedding> {
    return this.prisma.dataEmbedding.delete(args);
  }

  async getChatbot(parentId: string): Promise<PrismaChatbot | null> {
    return this.prisma.dataEmbedding
      .findUnique({
        where: { id: parentId },
      })
      .chatbot();
  }
}
