/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataEmbeddingService } from "../dataEmbedding.service";
import { DataEmbeddingCreateInput } from "./DataEmbeddingCreateInput";
import { DataEmbedding } from "./DataEmbedding";
import { DataEmbeddingFindManyArgs } from "./DataEmbeddingFindManyArgs";
import { DataEmbeddingWhereUniqueInput } from "./DataEmbeddingWhereUniqueInput";
import { DataEmbeddingUpdateInput } from "./DataEmbeddingUpdateInput";

export class DataEmbeddingControllerBase {
  constructor(protected readonly service: DataEmbeddingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataEmbedding })
  async createDataEmbedding(
    @common.Body() data: DataEmbeddingCreateInput
  ): Promise<DataEmbedding> {
    return await this.service.createDataEmbedding({
      data: {
        ...data,

        chatbot: data.chatbot
          ? {
              connect: data.chatbot,
            }
          : undefined,
      },
      select: {
        chatbot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        data: true,
        embedding: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataEmbedding] })
  @ApiNestedQuery(DataEmbeddingFindManyArgs)
  async dataEmbeddings(
    @common.Req() request: Request
  ): Promise<DataEmbedding[]> {
    const args = plainToClass(DataEmbeddingFindManyArgs, request.query);
    return this.service.dataEmbeddings({
      ...args,
      select: {
        chatbot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        data: true,
        embedding: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataEmbedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataEmbedding(
    @common.Param() params: DataEmbeddingWhereUniqueInput
  ): Promise<DataEmbedding | null> {
    const result = await this.service.dataEmbedding({
      where: params,
      select: {
        chatbot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        data: true,
        embedding: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataEmbedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataEmbedding(
    @common.Param() params: DataEmbeddingWhereUniqueInput,
    @common.Body() data: DataEmbeddingUpdateInput
  ): Promise<DataEmbedding | null> {
    try {
      return await this.service.updateDataEmbedding({
        where: params,
        data: {
          ...data,

          chatbot: data.chatbot
            ? {
                connect: data.chatbot,
              }
            : undefined,
        },
        select: {
          chatbot: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          data: true,
          embedding: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataEmbedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataEmbedding(
    @common.Param() params: DataEmbeddingWhereUniqueInput
  ): Promise<DataEmbedding | null> {
    try {
      return await this.service.deleteDataEmbedding({
        where: params,
        select: {
          chatbot: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          data: true,
          embedding: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
