/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataEmbedding } from "./DataEmbedding";
import { DataEmbeddingCountArgs } from "./DataEmbeddingCountArgs";
import { DataEmbeddingFindManyArgs } from "./DataEmbeddingFindManyArgs";
import { DataEmbeddingFindUniqueArgs } from "./DataEmbeddingFindUniqueArgs";
import { CreateDataEmbeddingArgs } from "./CreateDataEmbeddingArgs";
import { UpdateDataEmbeddingArgs } from "./UpdateDataEmbeddingArgs";
import { DeleteDataEmbeddingArgs } from "./DeleteDataEmbeddingArgs";
import { Chatbot } from "../../chatbot/base/Chatbot";
import { DataEmbeddingService } from "../dataEmbedding.service";
@graphql.Resolver(() => DataEmbedding)
export class DataEmbeddingResolverBase {
  constructor(protected readonly service: DataEmbeddingService) {}

  async _dataEmbeddingsMeta(
    @graphql.Args() args: DataEmbeddingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataEmbedding])
  async dataEmbeddings(
    @graphql.Args() args: DataEmbeddingFindManyArgs
  ): Promise<DataEmbedding[]> {
    return this.service.dataEmbeddings(args);
  }

  @graphql.Query(() => DataEmbedding, { nullable: true })
  async dataEmbedding(
    @graphql.Args() args: DataEmbeddingFindUniqueArgs
  ): Promise<DataEmbedding | null> {
    const result = await this.service.dataEmbedding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataEmbedding)
  async createDataEmbedding(
    @graphql.Args() args: CreateDataEmbeddingArgs
  ): Promise<DataEmbedding> {
    return await this.service.createDataEmbedding({
      ...args,
      data: {
        ...args.data,

        chatbot: args.data.chatbot
          ? {
              connect: args.data.chatbot,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DataEmbedding)
  async updateDataEmbedding(
    @graphql.Args() args: UpdateDataEmbeddingArgs
  ): Promise<DataEmbedding | null> {
    try {
      return await this.service.updateDataEmbedding({
        ...args,
        data: {
          ...args.data,

          chatbot: args.data.chatbot
            ? {
                connect: args.data.chatbot,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataEmbedding)
  async deleteDataEmbedding(
    @graphql.Args() args: DeleteDataEmbeddingArgs
  ): Promise<DataEmbedding | null> {
    try {
      return await this.service.deleteDataEmbedding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Chatbot, {
    nullable: true,
    name: "chatbot",
  })
  async getChatbot(
    @graphql.Parent() parent: DataEmbedding
  ): Promise<Chatbot | null> {
    const result = await this.service.getChatbot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
